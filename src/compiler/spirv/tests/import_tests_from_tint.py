#!/usr/bin/env python3

# Generates tests based on the samples repository from Tint.
#
# This script is not called by the build since the tests are not frequently
# updated and we would be adding a ton of machinery to build system without
# need: either a list of 200+ files or a hack to 'glob' files into Meson.

import os
import os.path
import glob
import shutil
import subprocess
import tempfile
from mako.template import Template

REPO = 'https://github.com/dneto0/spirv-samples'

HEADER = """\
/* DO NOT EDIT - This file is generated by import_tests_from_tint.py
 * script using git commit ${commit}
 * from repository ${repo}.
 */

/*

${license}

*/

#include <gtest/gtest.h>
#include "helpers.h"
"""

def import_control_flow_tests(dir, license):
    tmpl = Template(HEADER + """\

class ControlFlowTint : public spirv_test {};

% for name,contents in tests:
TEST_F(ControlFlowTint, ${name}) {
   get_nir_from_asm(
      0x10000,
      R"||(
${contents}
      )||", MESA_SHADER_FRAGMENT);

   ASSERT_TRUE(shader);
}

% endfor
""")

    disabled_tests = [
        'FindIfSelectionInternalHeaders_Premerge_ThenDirectToElse',
        'FindIfSelectionInternalHeaders_Premerge_Simple',
        'FindIfSelectionInternalHeaders_Premerge_ElseDirectToThen',
        'EmitBody_If_Then_Premerge',
        'EmitBody_If_Then_Else_Premerge',
        'EmitBody_If_Else_Premerge',
        'EmitBody_IfBreak_FromThenWithForward_FromElseWithForward_AlsoPremerge',
        'ComputeBlockOrder_ReorderSequence',
        'ClassifyCFGEdges_Pathological_Forward_Premerge',
    ]

    tests = []
    for f in glob.glob(os.path.join(dir, 'spvasm/SpvParserCFGTest_*.spvasm')):
        name = os.path.basename(f)[17:-7]
        if name in disabled_tests:
            name = 'DISABLED_' + name
        with open(f) as f:
            contents = f.read().rstrip()
        tests.append((name, contents))

        new = tmpl.render(tests=tests, commit=commit,
                          repo=REPO, license=license)

    try:
        with open('control_flow_tests_from_tint.cpp', 'r') as input:
            old = input.read()
    except:
        old = ""

    if new == old:
        print("No changes needed.")
    else:
        with open('control_flow_tests_from_tint.cpp', 'w') as output:
            output.write(new)
        print("Updated.")

if __name__ == "__main__":
    with tempfile.TemporaryDirectory(prefix="tests_from_tint_") as dir:
        print("Using temporary directory", dir)
        subprocess.run(['git', 'clone', REPO, dir], check=True)
        commit = subprocess.run(['git', '-C', dir,
                                 'show', '--pretty=format:%H ("%s")', '-s'],
                                check=True, capture_output=True).stdout.decode('utf-8')
        print("Importing from commit", commit)
        with open(os.path.join(dir, 'LICENSE')) as f:
            license = f.read()

        import_control_flow_tests(dir, license)



