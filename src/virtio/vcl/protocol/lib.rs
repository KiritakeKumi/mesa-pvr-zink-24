/* This file is generated by venus-protocol git-9578cfc5. */

/*
 * Copyright 2020 Google LLC
 * Copyright 2024 Qualcomm Innovation Center, Inc. All Rights Reserved.
 * SPDX-License-Identifier: MIT
 */

extern crate vcl_opencl_gen;
use vcl_opencl_gen::*;

#[derive(Debug)]
pub struct VirtGpuError;

pub type CLError = cl_int;
pub type CLResult<T> = Result<T, CLError>;

impl From<VirtGpuError> for cl_int {
    fn from(_: VirtGpuError) -> Self {
        CL_INVALID_VALUE
    }
}

pub struct VclBuffer {
    pub res: Box<dyn VclResource>,
}

impl VclBuffer {
    pub fn get_handle(&self) -> i32 {
        0
    }
}

pub trait VclResource {}

pub trait VclRenderer {
    fn submit(&self, submit: VclCsEncoder) -> CLResult<()>;
    fn create_buffer(&self, size: usize) -> CLResult<VclBuffer>;
    fn transfer_get(&self, res: &dyn VclResource) -> CLResult<()>;
}

pub struct Vcl {
    renderer: Box<dyn VclRenderer>,
}

pub mod cs_impl;
pub use cs_impl::*;
pub mod util;
pub use util::*;

pub mod cs;
pub use cs::*;
pub mod defines;
pub use defines::*;
pub mod info;
pub use info::*;
pub mod types;
pub use types::*;
pub mod handles;
pub use handles::*;
pub mod structs;
pub use structs::*;
pub mod transport;
pub use transport::*;
pub mod platform;
pub use platform::*;
pub mod program;
pub use program::*;
pub mod device;
pub use device::*;
pub mod context;
pub use context::*;
pub mod queue;
pub use queue::*;
pub mod memory;
pub use memory::*;
