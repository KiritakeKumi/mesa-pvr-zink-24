<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright Â© 2020 Google, Inc.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice (including the next
paragraph) shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 -->

<isa>

<!--
	Cat1 Instruction(s):
 -->

<bitset name="#cat1-dst" size="8">
	<doc>
		Unlike other instruction categories, cat1 can have relative dest
	</doc>
	<override>
		<expr>
			<var name="DST_REL"/>
			<var name="OFFSET"/>
			<literal val="0"/>
			<eq/>
			<and/>
		</expr>
		<display>
			r&lt;a0.x&gt;
		</display>
		<field name="OFFSET" low="0" high="7" type="uint"/>
	</override>
	<override>
		<expr>
			<var name="DST_REL"/>
		</expr>
		<display>
			r&lt;a0.x + {OFFSET}&gt;
		</display>
		<field name="OFFSET" low="0" high="7" type="uint"/>
	</override>
	<display>
		{DST}
	</display>
	<field name="DST" low="0" high="7" type="#reg-gpr"/>
	<encode type="struct ir3_register *">
		<map name="DST">src</map>
		<map name="OFFSET">src->array.offset</map>
	</encode>
</bitset>

<bitset name="#instruction-cat1" extends="#instruction">
	<field name="DST" low="32" high="39" type="#cat1-dst">
		<remap from="DST_REL" to="DST_REL"/>
	</field>
	<field name="REPEAT" low="40" high="42" type="#rptN"/>
	<field name="SS" pos="44" type="bool" display="(ss)"/>
	<field name="UL" pos="45" type="bool" display="(ul)"/>
	<field name="DST_REL" pos="49" type="bool"/>
	<field name="EVEN" pos="55" type="bool" display="(even)"/>
	<field name="POS_INF" pos="56" type="bool" display="(pos_infinity)"/>
	<field name="JP" pos="59" type="bool" display="(jp)"/>
	<field name="SY" pos="60" type="bool" display="(sy)"/>
	<pattern low="61" high="63">001</pattern>  <!-- cat1 -->
	<encode>
		<map name="SRC">src->regs[1]</map>
		<map name="SRC_R">!!(src->regs[1]->flags &amp; IR3_REG_R)</map>
		<map name="UL">!!(src->flags &amp; IR3_INSTR_UL)</map>
		<map name="DST_TYPE">src->cat1.dst_type</map>
		<map name="DST_REL">!!(src->regs[0]->flags &amp; IR3_REG_RELATIV)</map>
		<map name="SRC_TYPE">src->cat1.src_type</map>
	</encode>
</bitset>

<bitset name="#instruction-cat1-mov" extends="#instruction-cat1">
	<override>
		<expr>
			<literal val="2"/>
			<var name="DST"/>
			<literal val="0xf4"/>  <!-- a0.x -->
			<eq/>
		
			<literal val="4"/>  <!-- s16 -->
			<var name="SRC_TYPE"/>
			<eq/>
			<and/>
		
			<literal val="4"/>  <!-- s16 -->
			<var name="DST_TYPE"/>
			<eq/>
			<and/>
		</expr>
		<display>
			{SY}{SS}{JP}{REPEAT}{UL}mova {EVEN}{POS_INF}a0.x, {SRC}
		</display>
		<assert low="32" high="39">11110100</assert>  <!-- DST==a0.x -->
		<assert low="46" high="48">100</assert>       <!-- DST_TYPE==s16 -->
		<assert low="50" high="52">100</assert>       <!-- SRC_TYPE==s16 -->
	</override>
	<override>
		<expr>
			<literal val="2"/>
			<var name="DST"/>
			<literal val="0xf5"/>  <!-- a0.y -->
			<eq/>
		
			<literal val="2"/>  <!-- u16 -->
			<var name="SRC_TYPE"/>
			<eq/>
			<and/>
		
			<literal val="2"/>  <!-- u16 -->
			<var name="DST_TYPE"/>
			<eq/>
			<and/>
		</expr>
		<display>
			{SY}{SS}{JP}{REPEAT}{UL}mova1 {EVEN}{POS_INF}a1.x, {SRC}
		</display>
		<assert low="32" high="39">11110101</assert>  <!-- DST==a0.y -->
		<assert low="46" high="48">010</assert>       <!-- DST_TYPE==u16 -->
		<assert low="50" high="52">010</assert>       <!-- SRC_TYPE==u16 -->
	</override>
	<override>
		<expr>
			<var name="SRC_TYPE"/>
			<var name="DST_TYPE"/>
			<ne/>
		</expr>
		<display>
			{SY}{SS}{JP}{REPEAT}{UL}cov.{SRC_TYPE}{DST_TYPE} {EVEN}{POS_INF}{DST_HALF}{DST}, {SRC}
		</display>
	</override>
	<display>
		{SY}{SS}{JP}{REPEAT}{UL}mov.{SRC_TYPE}{DST_TYPE} {EVEN}{POS_INF}{DST_HALF}{DST}, {SRC}
	</display>
	<pattern low="57" high="58">00</pattern>  <!-- OPC -->
	<derived name="HALF" type="bool" display="h">
		<expr>
			<var name="SRC_TYPE"/>
			<jmp/>
			<retlit val="1"/>  <!-- f16 -->
			<retlit val="0"/>  <!-- f32 -->
			<retlit val="1"/>  <!-- u16 -->
			<retlit val="0"/>  <!-- u32 -->
			<retlit val="1"/>  <!-- s16 -->
			<retlit val="0"/>  <!-- s32 -->
			<retlit val="1"/>  <!-- u8 -->
			<retlit val="1"/>  <!-- s8 -->
		</expr>
	</derived>
	<derived name="DST_HALF" type="bool" display="h">
		<expr>
			<var name="DST_TYPE"/>
			<jmp/>
			<retlit val="1"/>  <!-- f16 -->
			<retlit val="0"/>  <!-- f32 -->
			<retlit val="1"/>  <!-- u16 -->
			<retlit val="0"/>  <!-- u32 -->
			<retlit val="1"/>  <!-- s16 -->
			<retlit val="0"/>  <!-- s32 -->
			<retlit val="1"/>  <!-- u8 -->
			<retlit val="1"/>  <!-- s8 -->
		</expr>
	</derived>
	<field name="DST_TYPE" low="46" high="48" type="#type"/>
	<field name="SRC_TYPE" low="50" high="52" type="#type"/>
</bitset>

<!--
	Helpers for displaying cat1 source forms.. split out so the toplevel
	instruction can just refer to {SRC}.  This decouples the cov/mov/mova
	permultations from the different src type permutations
 -->

<bitset name="#cat1-immed-src" size="32">
	<override>
		<expr>
			<doc>Is SRC_TYPE f16?</doc>
			<var name="SRC_TYPE"/>
			<literal val="0"/> <!-- f16 -->
			<eq/>
		</expr>
		<display>
			h({IMMED})
		</display>
		<field name="IMMED" low="0" high="15" type="float"/>
	</override>
	<override>
		<expr>
			<doc>Is SRC_TYPE f32?</doc>
			<var name="SRC_TYPE"/>
			<literal val="1"/> <!-- f32 -->
			<eq/>
		</expr>
		<display>
			({IMMED})
		</display>
		<field name="IMMED" low="0" high="31" type="float"/>
	</override>
	<override>
		<expr>
			<doc>Is SRC_TYPE s16?</doc>
			<var name="SRC_TYPE"/>
			<literal val="4"/> <!-- s16 -->
			<eq/>
		</expr>
		<display>
			{IMMED}
		</display>
		<field name="IMMED" low="0" high="15" type="int"/>
	</override>

	<override>
		<expr>
			<doc>Is SRC_TYPE s32?</doc>
			<var name="SRC_TYPE"/>
			<literal val="5"/> <!-- s32 -->
			<eq/>
		</expr>
		<display>
			{IMMED}
		</display>
		<field name="IMMED" low="0" high="31" type="int"/>
	</override>
	<display>
		{IMMED}
	</display>
	<field name="IMMED" low="0" high="31" type="uint"/>
	<encode type="struct ir3_register *">
		<map name="IMMED">src->uim_val</map>
	</encode>
</bitset>

<bitset name="#cat1-const-src" size="11">
	<display>
		{SRC_R}{HALF}{CONST}
	</display>
	<field name="CONST" low="0" high="10" type="#reg-const"/>
	<encode type="struct ir3_register *">
		<map name="CONST">src</map>
	</encode>
</bitset>

<bitset name="#cat1-gpr-src" size="8">
	<display>
		{SRC_R}{HALF}{SRC}
	</display>
	<field name="SRC" low="0" high="7" type="#reg-gpr"/>
	<encode type="struct ir3_register *">
		<map name="SRC">src</map>
	</encode>
</bitset>

<bitset name="#cat1-relative-gpr-src" size="10">
	<display>
		{SRC_R}{HALF}{SRC}
	</display>
	<field name="SRC" low="0" high="9" type="#reg-relative-gpr"/>
	<encode type="struct ir3_register *">
		<map name="SRC">src</map>
	</encode>
</bitset>

<bitset name="#cat1-relative-const-src" size="10">
	<display>
		{SRC_R}{HALF}{SRC}
	</display>
	<field name="SRC" low="0" high="9" type="#reg-relative-const"/>
	<encode type="struct ir3_register *">
		<map name="SRC">src</map>
	</encode>
</bitset>

<!--
	cov/mov/mova permultations based on src type:
 -->

<bitset name="mov-immed" extends="#instruction-cat1-mov">
	<field name="SRC" low="0" high="31" type="#cat1-immed-src">
		<remap from="SRC_TYPE" to="SRC_TYPE"/>
	</field>
	<pattern pos="43">0</pattern>   <!-- SRC_R -->
	<pattern low="53" high="54">10</pattern>
</bitset>

<bitset name="mov-const" extends="#instruction-cat1-mov">
	<field name="SRC" low="0" high="10" type="#cat1-const-src">
		<remap from="SRC_R" to="SRC_R"/>
	</field>
	<pattern low="11" high="31">000000000000000000000</pattern>
	<field name="SRC_R" pos="43" type="bool" display="(r)"/>
	<pattern low="53" high="54">01</pattern>
</bitset>

<bitset name="mov-gpr" extends="#instruction-cat1-mov">
	<field name="SRC" low="0" high="7" type="#cat1-gpr-src">
		<remap from="SRC_R" to="SRC_R"/>
	</field>
	<pattern low="8" high="31">000000000000000000000000</pattern>
	<field name="SRC_R" pos="43" type="bool" display="(r)"/>
	<pattern low="53" high="54">00</pattern>
</bitset>

<bitset name="#instruction-cat1-relative" extends="#instruction-cat1-mov">
	<pattern pos="11">1</pattern>
	<pattern low="12" high="31">00000000000000000000</pattern>
	<field name="SRC_R" pos="43" type="bool" display="(r)"/>
	<pattern low="53" high="54">00</pattern>
</bitset>

<bitset name="mov-relgpr" extends="#instruction-cat1-relative">
	<field name="SRC" low="0" high="9" type="#cat1-relative-gpr-src">
		<remap from="SRC_R" to="SRC_R"/>
	</field>
	<pattern pos="10">0</pattern>
</bitset>

<bitset name="mov-relconst" extends="#instruction-cat1-relative">
	<field name="SRC" low="0" high="9" type="#cat1-relative-const-src">
		<remap from="SRC_R" to="SRC_R"/>
	</field>
	<pattern pos="10">1</pattern>
</bitset>

<!--
	Other newer cat1 instructions
 -->

<bitset name="movmsk" extends="#instruction-cat1">
	<display>
		{SY}{SS}{JP}{UL}movmsk.w{W} {DST}
	</display>
	<derived name="W" type="uint">
		<expr>
			<literal val="5"/>
			<var name="REPEAT"/>
			<literal val="1"/>
			<add/>
			<lsh/>
		</expr>
	</derived>
	<pattern low="0" high="31">00000000000000000000000000000000</pattern>
	<pattern pos="43">0</pattern>   <!-- SRC_R -->
	<pattern low="46" high="48">011</pattern>       <!-- DST_TYPE==u32 -->
	<pattern low="50" high="52">011</pattern>       <!-- SRC_TYPE==u32 -->
	<pattern low="53" high="54">00</pattern>
	<pattern low="57" high="58">11</pattern>  <!-- OPC -->

	<!--
		TODO in ir3 things are encoded w/ instr->repeat==0 and repeat field is
		reconstructed from wrmask.. but I'm not sure if that is actually accurate
		(in terms of how delay slots work).. for now, work around that to match
		the existing stuff:
	 -->
	<encode>
		<map name="REPEAT">util_last_bit(src->regs[0]->wrmask) - 1</map>
	</encode>
</bitset>


</isa>
