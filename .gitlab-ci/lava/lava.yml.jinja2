job_name: "mesa: {{ pipeline_info }}"
device_type: {{ device_type }}
context:
  extra_nfsroot_args: " init=/init rootwait minio_results={{ job_artifacts_base }}"
timeouts:
  job:
    minutes: 30
priority: 75
visibility:
    group:
      - "Collabora+fdo"
{% if tags %}
{% set lavatags = tags.split(',') %}
tags:
{% for tag in lavatags %}
  - {{ tag }}
{% endfor %}
{% endif %}
actions:
- deploy:
    timeout:
      minutes: 10
    to: tftp
    kernel:
      url: {{ base_system_url_prefix }}/{{ kernel_image_name }}
{% if kernel_image_type %}
      {{ kernel_image_type }}
{% endif %}
    nfsrootfs:
      url: {{ base_system_url_prefix }}/lava-rootfs.tgz
      compression: gz
{% if dtb %}
    dtb:
      url: {{ base_system_url_prefix }}/{{ dtb }}.dtb
{% endif %}
    os: oe
- boot:
    timeout:
      minutes: 25
    method: {{ boot_method }}
    commands: nfs
    prompts:
      - 'lava-shell:'
- test:
    timeout:
      minutes: 30
    failure_retry: 1
    definitions:
    - repository:
        metadata:
          format: Lava-Test Test Definition 1.0
          name: mesa
          description: "Mesa test plan"
          os:
          - oe
          scope:
          - functional
        run:
          steps:
          # A bunch of setup we have to do before we can pull anything
          - cd /
          - mount -t proc none /proc
          - mount -t sysfs none /sys
          - mount -t devtmpfs none /dev || echo possibly already mounted
          - mkdir -p /dev/pts
          - mount -t devpts devpts /dev/pts
          - mkdir -p /dev/shm
          - mount -t tmpfs tmpfs /dev/shm
          - mount -t tmpfs tmpfs /tmp

          - echo "nameserver 8.8.8.8" > /etc/resolv.conf
          - echo "$NFS_SERVER_IP caching-proxy" >> /etc/hosts
          - for i in 1 2 3; do sntp -sS pool.ntp.org && break || sleep 2; done

          - mkdir -p $CI_PROJECT_DIR
          - wget -S --progress=dot:giga -O- {{ mesa_build_url }} | tar -xz -C $CI_PROJECT_DIR
          - wget -S --progress=dot:giga -O- {{ job_rootfs_overlay_url }} | tar -xz -C /
          - export CI_JOB_JWT="{{ jwt }}"
          - exec /init-stage2.sh
        parse:
          pattern: 'hwci: (?P<test_case_id>\S*):\s+(?P<result>(pass|fail))'
      from: inline
      name: mesa
      path: inline/mesa.yaml
